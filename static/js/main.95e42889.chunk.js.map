{"version":3,"sources":["utilities/connectBackgroundTransition.js","components/Loader.jsx","App.js","serviceWorker.js","index.js"],"names":["connectBackgroundTransitionGroup","main_BG","CSSRulePlugin","getRule","TweenLite","to","cssRule","opacity","scale","rotate","filter","Loader","override","css","color","size","margin","App","useState","displayName","setDisplayName","roomName","setRoomName","onCall","setOnCall","useEffect","className","id","class","title","src","frameborder","webkitallowfullscreen","mozallowfullscreen","allowfullscreen","loadingComponent","onAPILoad","JitsiMeetAPI","addEventListener","window","location","href","config","prejoinPageEnabled","disableDeepLinking","transcribingEnabled","interfaceConfig","APP_NAME","SHOW_PROMOTIONAL_CLOSE_PAGE","DISABLE_TRANSCRIPTION_SUBTITLES","LANG_DETECTION","TOOLBAR_BUTTONS","TOOLBAR_ALWAYS_VISIBLE","style","height","type","placeholder","value","onChange","e","target","onClick","Boolean","hostname","match","gsap","registerPlugin","CSSPlugin","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.95e42889.chunk.js","sourcesContent":["import { CSSRulePlugin, TweenLite } from \"gsap/all\";\r\n\r\nexport const connectBackgroundTransitionGroup = {\r\n\r\n  onConnect: () => {\r\n    const main_BG = CSSRulePlugin.getRule(\".main-container:before\");\r\n    TweenLite.to(main_BG, 2.6, {cssRule:{opacity: 1, scale: 1.9, rotate: 8, filter: \"blur(12px)\"}});\r\n  },\r\n  onDisconnect: () => {\r\n    const main_BG = CSSRulePlugin.getRule(\".main-container:before\");\r\n    TweenLite.to(main_BG, 2.6, {cssRule:{opacity: 0.6, scale: 1.1, rotate: -8, filter: \"blur(0px)\"}});\r\n  }\r\n\r\n};\r\n","import React from 'react';\r\nimport { css } from '@emotion/react';\r\nimport GridLoader from \"react-spinners/GridLoader\";\r\nconst Loader = () => {\r\n  const override = css`\r\n  margin: auto;\r\n  -webkit-box-reflect: below 40px linear-gradient(\r\n    to bottom,\r\n    transparent,\r\n    rgba(255, 255, 255, 0.4));\r\n  `;\r\n  return (\r\n    <GridLoader color={'#ffffff80'} size={55} margin={5} css={override}/>\r\n  );\r\n}\r\nexport default Loader;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./SASS/main.scss\";\r\n\r\nimport { connectBackgroundTransitionGroup } from \"./utilities/connectBackgroundTransition\";\r\n\r\nimport Loader from \"./components/Loader\";\r\n\r\nimport Jitsi from \"react-jitsi\";\r\n\r\nconst App = () => {\r\n  const [displayName, setDisplayName] = useState(\"\");\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [onCall, setOnCall] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (onCall === true) {\r\n      connectBackgroundTransitionGroup.onConnect();\r\n    } else if (onCall === false) {\r\n      connectBackgroundTransitionGroup.onDisconnect();\r\n    }\r\n  }, [onCall]);\r\n\r\n  return (\r\n    <div className=\"container-fluid main-container\">\r\n      <div id=\"video-full\" class=\"video-full\">\r\n          <div class=\"video-full__overlay\"></div>\r\n          <iframe title=\"video\" class=\"hidden-mobile\" src=\"https://player.vimeo.com/video/454635435?background=1&amp;autoplay=1&amp;loop=1&amp;autopause=0&amp;muted=1\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen=\"\"></iframe>\r\n      </div>\r\n      <div className={onCall ? \"row my-1\" : \"row my-5\"}>\r\n        <div className=\"col\">\r\n          <div className=\"my-wrap\">JITSI LIVE VIDEO CALL</div>\r\n          <div className={onCall ? \"jisti-container\" : \"\"}>\r\n            {onCall ? (\r\n              <Jitsi\r\n                roomName={roomName}\r\n                displayName={displayName}\r\n                loadingComponent={Loader}\r\n                onAPILoad={(JitsiMeetAPI) =>\r\n                  JitsiMeetAPI.addEventListener(\"videoConferenceLeft\", () => {\r\n                    window.location.href = \"/\";\r\n                  })\r\n                }\r\n                config={{\r\n                  prejoinPageEnabled: false,\r\n                  disableDeepLinking: true,\r\n                  transcribingEnabled: true\r\n                }}\r\n                interfaceConfig={{\r\n                  APP_NAME: \"Jitsi Chat\",\r\n                  SHOW_PROMOTIONAL_CLOSE_PAGE: false,\r\n                  DISABLE_TRANSCRIPTION_SUBTITLES: false,\r\n                  LANG_DETECTION: true,\r\n                  TOOLBAR_BUTTONS: [\r\n                    \"microphone\",\r\n                    \"camera\",\r\n                    \"closedcaptions\",\r\n                    \"desktop\",\r\n                    \"fullscreen\",\r\n                    \"fodeviceselection\",\r\n                    \"hangup\",\r\n                    \"profile\",\r\n                    \"info\",\r\n                    \"chat\",\r\n                    \"recording\",\r\n                    \"livestreaming\",\r\n                    \"etherpad\",\r\n                    \"sharedvideo\",\r\n                    \"settings\",\r\n                    \"raisehand\",\r\n                    \"videoquality\",\r\n                    \"filmstrip\",\r\n                    \"invite\",\r\n                    \"feedback\",\r\n                    \"stats\",\r\n                    \"shortcuts\",\r\n                    \"tileview\",\r\n                    \"videobackgroundblur\",\r\n                    \"download\",\r\n                    \"help\",\r\n                    \"mute-everyone\"\r\n                  ],\r\n                  TOOLBAR_ALWAYS_VISIBLE: true\r\n                }}\r\n              />\r\n            ) : (\r\n              <div className=\"my-wrap\" style={{ height: \"70vh\" }}>\r\n                <p className=\"my-ptag\">Create / Join a Room</p>\r\n                <input\r\n                  className=\"my-input\"\r\n                  type=\"text\"\r\n                  placeholder=\"Room name\"\r\n                  value={roomName}\r\n                  onChange={(e) => setRoomName(e.target.value)}\r\n                />\r\n                <input\r\n                  className=\"my-input\"\r\n                  type=\"text\"\r\n                  placeholder=\"Your name\"\r\n                  value={displayName}\r\n                  onChange={(e) => setDisplayName(e.target.value)}\r\n                />\r\n                <button className=\"my-button\" onClick={() => setOnCall(true)}>\r\n                  <div className=\"connect\">\r\n                    <span className=\"px-4\">CONNECT</span>\r\n                  </div>\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div\r\n            onClick={() => setOnCall(false)}\r\n            className=\"my-wrap p-1 pb-2 my-name\"\r\n          >\r\n            2021 JITSI VIDEO CALL&nbsp;\r\n            {onCall ? (\r\n              <span className=\"goBack ml-5\">GO BACK&nbsp;&#8676;</span>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'font-awesome/css/font-awesome.css';\r\n\r\nimport { gsap, CSSPlugin, CSSRulePlugin} from \"gsap/all\";\r\ngsap.registerPlugin(CSSPlugin, CSSRulePlugin);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}
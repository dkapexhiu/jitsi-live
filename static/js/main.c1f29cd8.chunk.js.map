{"version":3,"sources":["utilities/connectBackgroundTransition.js","components/Loader.jsx","App.js","serviceWorker.js","index.js"],"names":["connectBackgroundTransitionGroup","main_BG","CSSRulePlugin","getRule","TweenLite","to","cssRule","opacity","scale","rotate","filter","Loader","override","css","color","size","margin","App","useState","displayName","setDisplayName","roomName","setRoomName","onCall","setOnCall","useEffect","className","id","title","src","frameBorder","webkitallowfullscreen","mozallowfullscreen","allowFullScreen","loadingComponent","onAPILoad","JitsiMeetAPI","addEventListener","window","location","href","config","prejoinPageEnabled","disableDeepLinking","transcribingEnabled","interfaceConfig","APP_NAME","SHOW_PROMOTIONAL_CLOSE_PAGE","DISABLE_TRANSCRIPTION_SUBTITLES","LANG_DETECTION","TOOLBAR_BUTTONS","TOOLBAR_ALWAYS_VISIBLE","style","height","type","placeholder","value","onChange","e","target","onClick","Boolean","hostname","match","gsap","registerPlugin","CSSPlugin","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1f29cd8.chunk.js","sourcesContent":["import { CSSRulePlugin, TweenLite } from \"gsap/all\";\n\nexport const connectBackgroundTransitionGroup = {\n\n  onConnect: () => {\n    const main_BG = CSSRulePlugin.getRule(\".main-container:before\");\n    TweenLite.to(main_BG, 2.6, {cssRule:{opacity: 1, scale: 1.9, rotate: 8, filter: \"blur(12px)\"}});\n  },\n  onDisconnect: () => {\n    const main_BG = CSSRulePlugin.getRule(\".main-container:before\");\n    TweenLite.to(main_BG, 2.6, {cssRule:{opacity: 0.6, scale: 1.1, rotate: -8, filter: \"blur(0px)\"}});\n  }\n\n};\n","import React from 'react';\nimport { css } from '@emotion/react';\nimport GridLoader from \"react-spinners/GridLoader\";\nconst Loader = () => {\n  const override = css`\n  margin: auto;\n  -webkit-box-reflect: below 40px linear-gradient(\n    to bottom,\n    transparent,\n    rgba(255, 255, 255, 0.4));\n  `;\n  return (\n    <GridLoader color={'#ffffff80'} size={55} margin={5} css={override}/>\n  );\n}\nexport default Loader;\n","import React, { useEffect, useState } from \"react\";\n\nimport \"./SASS/main.scss\";\n\nimport { connectBackgroundTransitionGroup } from \"./utilities/connectBackgroundTransition\";\n\nimport Loader from \"./components/Loader\";\n\nimport Jitsi from \"react-jitsi\";\n\nconst App = () => {\n  const [displayName, setDisplayName] = useState(\"\");\n  const [roomName, setRoomName] = useState(\"\");\n  const [onCall, setOnCall] = useState(false);\n\n  useEffect(() => {\n    if (onCall === true) {\n      connectBackgroundTransitionGroup.onConnect();\n    } else if (onCall === false) {\n      connectBackgroundTransitionGroup.onDisconnect();\n    }\n  }, [onCall]);\n\n  return (\n    <div className=\"container-fluid main-container\">\n      <div id=\"video-full\" className=\"video-full\">\n          <div className=\"video-full__overlay\"></div>\n          <iframe title=\"video\" className=\"hidden-mobile\" src=\"https://player.vimeo.com/video/454635435?background=1&amp;autoplay=1&amp;loop=1&amp;autopause=0&amp;muted=1\" frameBorder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowFullScreen=\"\"></iframe>\n      </div>\n      <div className={onCall ? \"row my-1\" : \"row my-5\"}>\n        <div className=\"col\">\n          <div className=\"my-wrap\">JITSI LIVE VIDEO CALL</div>\n          <div className={onCall ? \"jisti-container\" : \"\"}>\n            {onCall ? (\n              <Jitsi\n                roomName={roomName}\n                displayName={displayName}\n                loadingComponent={Loader}\n                onAPILoad={(JitsiMeetAPI) =>\n                  JitsiMeetAPI.addEventListener(\"videoConferenceLeft\", () => {\n                      window.location.href = \"/jitsi-live/\";\n                  })\t                \n                }\n                config={{\n                  prejoinPageEnabled: false,\n                  disableDeepLinking: true,\n                  transcribingEnabled: true\n                }}\n                interfaceConfig={{\n                  APP_NAME: \"Jitsi Chat\",\n                  SHOW_PROMOTIONAL_CLOSE_PAGE: false,\n                  DISABLE_TRANSCRIPTION_SUBTITLES: false,\n                  LANG_DETECTION: true,\n                  TOOLBAR_BUTTONS: [\n                    \"microphone\",\n                    \"camera\",\n                    \"closedcaptions\",\n                    \"desktop\",\n                    \"fullscreen\",\n                    \"fodeviceselection\",\n                    \"hangup\",\n                    \"profile\",\n                    \"info\",\n                    \"chat\",\n                    \"recording\",\n                    \"livestreaming\",\n                    \"etherpad\",\n                    \"sharedvideo\",\n                    \"settings\",\n                    \"raisehand\",\n                    \"videoquality\",\n                    \"filmstrip\",\n                    \"invite\",\n                    \"feedback\",\n                    \"stats\",\n                    \"shortcuts\",\n                    \"tileview\",\n                    \"videobackgroundblur\",\n                    \"download\",\n                    \"help\",\n                    \"mute-everyone\"\n                  ],\n                  TOOLBAR_ALWAYS_VISIBLE: true\n                }}\n              />\n            ) : (\n              <div className=\"my-wrap\" style={{ height: \"70vh\" }}>\n                <p className=\"my-ptag\">Create / Join a Room</p>\n                <input\n                  className=\"my-input\"\n                  type=\"text\"\n                  placeholder=\"Room name\"\n                  value={roomName}\n                  onChange={(e) => setRoomName(e.target.value)}\n                />\n                <input\n                  className=\"my-input\"\n                  type=\"text\"\n                  placeholder=\"Your name\"\n                  value={displayName}\n                  onChange={(e) => setDisplayName(e.target.value)}\n                />\n                <button className=\"my-button\" onClick={() => setOnCall(true)}>\n                  <div className=\"connect\">\n                    <span className=\"px-4\">CONNECT</span>\n                  </div>\n                </button>\n              </div>\n            )}\n          </div>\n          <div\n            onClick={() => setOnCall(false)}\n            className=\"my-wrap p-1 pb-2 my-name\"\n          >\n            2021 JITSI VIDEO CALL&nbsp;\n            {onCall ? (\n              <span className=\"goBack ml-5\">GO BACK&nbsp;&#8676;</span>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\n\nimport { gsap, CSSPlugin, CSSRulePlugin} from \"gsap/all\";\ngsap.registerPlugin(CSSPlugin, CSSRulePlugin);\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}